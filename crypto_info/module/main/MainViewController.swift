//
//  MainViewController.swift
//  crypto_info
//
//  Created Phattarapon Jungtakarn on 18/8/2566 BE.
//  Copyright © 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class MainViewController: UIViewController {

	var presenter: MainPresenterProtocol?
    var searching: Bool = false
    var cryptoData = [CryptocurrencyEntity]()
    var searchingAllCrypto = [CryptocurrencyEntity]()
    let fontDetail = UIFont.systemFont(ofSize: 16.0, weight: .regular)
    
    @IBOutlet weak var searchBar: UIView!
    @IBOutlet weak var searchTextField: UITextField!
    @IBOutlet weak var iconSearchImageView: UIImageView!
    @IBOutlet weak var collectionViewCrypto: MainEmptyCollectionView!
    
    override func willTransition(to newCollection: UITraitCollection, with coordinator: UIViewControllerTransitionCoordinator) {
        let isLandscape = UIDevice.current.orientation.isLandscape

        if isLandscape {
            DispatchQueue.main.async{
                self.collectionViewCrypto.reloadSections(NSIndexSet(index: 0) as IndexSet)
            }
        } else {
            DispatchQueue.main.async{
                self.collectionViewCrypto.reloadSections(NSIndexSet(index: 0) as IndexSet)
            }
        }
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        self.presenter?.notifyViewDidLoad()
        self.initUI()
    }
    
    override func viewDidLayoutSubviews() {
        self.searchBar.layoutIfNeeded()
        self.searchBar.layoutSubviews()
        searchBar.layoutIfNeeded()
        searchBar.layoutSubviews()
    }
    
    func initUI() {
        self.setupNavbar()
        self.setupSearchBar()
        let nibCryptoListCell = UINib(nibName: "MainCell", bundle: nil)
        self.collectionViewCrypto.register(nibCryptoListCell, forCellWithReuseIdentifier: "MainCell")
    }
    
    func setupNavbar() {
        self.navigationController?.navigationBar.isHidden = false
        self.navigationItem.title = "Crypto Info"
    }
    
    func setupSearchBar() {
        self.searchBar.translatesAutoresizingMaskIntoConstraints = false
        self.searchBar.clipsToBounds = true
        self.searchBar.heightAnchor.constraint(equalToConstant: 50).isActive = true
        self.searchBar.backgroundColor = UIColor.white
        self.searchBar.layer.cornerRadius = 8
        self.searchBar.layer.borderWidth = 1
        self.searchBar.layer.borderColor = UIColor.lightGray.cgColor
        self.searchTextField.delegate = self
        self.searchTextField.returnKeyType = .search
        self.searchTextField.attributedPlaceholder =  NSAttributedString.init(string: "Searching",
                                                                        attributes: [NSAttributedString.Key.strokeColor: UIColor.lightGray,
                                                                        NSAttributedString.Key.foregroundColor: UIColor.lightGray])
        self.searchTextField.addTarget(self,
                                    action: #selector(textFieldDidChangeEditing(_:)),
                                    for: .editingChanged)
        self.iconSearchImageView.image = UIImage(named: "ic_search_blue")?.tinted(with: UIColor.lightGray)
    }
    
    @objc func textFieldDidChangeEditing(_ textField: UITextField) {
        if let text = textField.text , !text.isEmpty {
            self.searchingAllCrypto = self.cryptoData.filter({ (dataCrypto) -> Bool in
                let nameString: NSString = String(dataCrypto.name).trimmingCharacters(in: .whitespacesAndNewlines) as NSString
                let rangeNameString = nameString.range(of: text, options: [.caseInsensitive, .diacriticInsensitive])

                return rangeNameString.location != NSNotFound
            })

            self.searching = true
            if self.searchingAllCrypto.count == 0 {
                let text = String(format: "No Data", textField.text!)
                self.collectionViewCrypto.display(title: text)
                self.collectionViewCrypto.reloadData()
            } else {
                self.collectionViewCrypto.reloadData()
            }
        } else {
            self.searching = false
            self.collectionViewCrypto.reloadData()
        }
    }

}

extension MainViewController: MainViewProtocol {
    
    func displayCryptoData(cryptoData: [CryptocurrencyEntity]) {
        self.cryptoData = cryptoData
        self.collectionViewCrypto.reloadData()
    }
    
    func displayAlert(title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: UIAlertAction.Style.cancel, handler: nil))
        
        self.present(alert, animated: true)
    }
    
}

extension MainViewController: UITextFieldDelegate {
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        if textField == self.searchTextField {
            if textField.text != "" {
                textField.text = ""
                self.searching = false
                self.searchingAllCrypto = self.cryptoData
            } else {
                self.searching = false
            }
        }
    }
    
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        if textField == self.searchTextField {
           if textField.text != "" {
               textField.text = ""
               self.searching = false
               self.collectionViewCrypto.reloadData()
               return true
           } else {
               self.searching = false
               self.collectionViewCrypto.reloadData()
               return true
           }
       } else {
           return false
       }
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        self.view.endEditing(true)
        if textField == self.searchTextField {
            if textField.text != "" {
                self.searching = true
                return true
            } else {
                self.searching = false
                return false
            }
        } else {
            return true
        }
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        self.view.endEditing(true)
        if textField == self.searchTextField {
            if textField.text != "" {
                self.searching = true
                self.collectionViewCrypto.reloadData()
            } else {
                self.searching = false
                self.collectionViewCrypto.reloadData()
            }
        }
    }
    
}

extension MainViewController: UICollectionViewDataSource, UICollectionViewDelegate {

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if self.searching {
            return self.searchingAllCrypto.count
        } else {
            return self.cryptoData.count
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "MainCell", for: indexPath) as! MainCell
        
        if self.searching {
            cell.displayCryptoLists(cryptoData: self.searchingAllCrypto[indexPath.row])
        } else {
            cell.displayCryptoLists(cryptoData: self.cryptoData[indexPath.row])
        }
    
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        self.presenter?.notifyRouteToHistoryCrypto(data: self.cryptoData[indexPath.row])
    }
    
    func scrollViewWillBeginDragging(_ scrollView: UIScrollView) {
        self.view.endEditing(true)
    }
    
}

extension MainViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        if self.searching {
            if self.searchingAllCrypto.count != 0 {
                let title = self.searchingAllCrypto[indexPath.row].name
                
                let titleSize: CGFloat = title.heightWithConstrainedWidth(width: self.collectionViewCrypto.frame.width - ConstraintNewsPage.DefaultConstraintLeftRight.cgFloatValue, font: self.fontDetail)
                
                let height = (titleSize + ConstraintNewsPage.DefaultSizeCell.cgFloatValue)
                
                return CGSize(width: self.collectionViewCrypto.frame.width, height: height)
            } else {
                return CGSize(width: self.collectionViewCrypto.frame.width, height: 0)
            }
        } else {
            if self.cryptoData.count != 0 {
                let title = self.cryptoData[indexPath.row].name
                
                let titleSize: CGFloat = title.heightWithConstrainedWidth(width: self.collectionViewCrypto.frame.width - ConstraintNewsPage.DefaultConstraintLeftRight.cgFloatValue, font: self.fontDetail)
                
                let height = (titleSize + ConstraintNewsPage.DefaultSizeCell.cgFloatValue)
                
                return CGSize(width: self.collectionViewCrypto.frame.width, height: height)
            } else {
                return CGSize(width: self.collectionViewCrypto.frame.width, height: 0)
            }
        }
    }
    
}
